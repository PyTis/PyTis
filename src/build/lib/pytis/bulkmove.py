#!/usr/bin/env python
# ##############################################################################
# The contents of this file are subject to the PyTis Public License Version    #
# 1.0 (the "License"); you may not use this file except in compliance with     #
# the License. You may obtain a copy of the License at                         #
#                                                                              #
#     http://www.PyTis.com/License/                                            #
#                                                                              #
#     Copyright (c) 2010 Josh Lee                                              #
#                                                                              #
# Software distributed under the License is distributed on an "AS IS" basis,   #
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License     #
# for the specific language governing rights and limitations under the         #
# License.                                                                     #
#                                                                              #
# @auto-generated by the PyTis Copyright Tool on 12:32 11 Nov, 2011            #
############################################################################## #
"""bulkmove
========
"""

from pprint import pprint
import optparse
import os
import shutil
import sys
import pytis as PyTis

__curdir__ = os.path.abspath(os.path.dirname(__file__))
__author__ = 'Josh Lee'
__created__ = '12:31am 11 Nov, 2011'
__copyright__ = 'PyTis'
__version__ = '1.2'

def version(__version__=__version__):
	print(__version__)

def find_fix(fpath,rootdir):
	""" finds prefix or postfix for a file.
	"""
	if(os.path.isdir(fpath)):
		child = os.path.abspath(fpath)
	else:
		child = os.path.abspath(os.path.dirname(fpath))
	parent = os.path.abspath(rootdir)
	diff = child.replace(parent,'')
	fix = diff.replace(os.sep,'_')
	try:
		if fix.startswith('_'):
			fix = fix[1:]
	except IndexError as e:
		return ''
	return fix

def safe_fname(fpath,opts,i=None):
	if opts.upper:
		test_fpath = fpath.upper()
	elif opts.lower:
		test_fpath = fpath.lower()
	else:
		test_fpath = fpath

	if not os.path.exists(test_fpath):
		return test_fpath
	else:
		if not i:
			i = 1
		else:
			i=i+1
		fname = os.path.basename(fpath)
		bag = os.path.splitext(fname)
		testname = "%s_%s%s" % (bag[0],i,bag[1])

		if opts.upper:
			newfile = os.path.abspath(os.path.join(os.path.dirname(fpath),testname.upper()))
		elif opts.lower:
			newfile = os.path.abspath(os.path.join(os.path.dirname(fpath),testname.lower()))
		else:
			newfile = os.path.abspath(os.path.join(os.path.dirname(fpath),testname))

		if not os.path.exists(newfile):
			if i is not None:
				log.warn("%s already existed in the outdir, added _%s to the end of the filename." % (fname,i))
			return newfile
		else:
			return safe_fname(fpath,opts,i)

def run(files,rootdir,opts):
	global log
	for old_file in files:
		old_name = os.path.basename(old_file)
		bag = os.path.splitext(old_name)
		new_filename = bag[0]
		try:
			new_fileext = bag[1]
		except IndexError as e:
			continue

		if opts.prefix:
			new_filename = '%s_%s%s' % (find_fix(old_file,rootdir),new_filename,new_fileext)
		if opts.postfix:
			new_filename = '%s_%s%s' % (new_filename,find_fix(old_file,rootdir),new_fileext)
		if not opts.prefix and not opts.postfix:
			new_filename = '%s%s' % (new_filename,new_fileext)
		
		if opts.upper:
			new_file = os.path.abspath(os.path.join(opts.outdir,new_filename.upper()))
		elif opts.lower:
			new_file = os.path.abspath(os.path.join(opts.outdir,new_filename.lower()))
		else:
			new_file = os.path.abspath(os.path.join(opts.outdir,new_filename))

		if os.path.abspath(old_file) == new_file:
			log.error("Source and Destination are the same: cp %s %s" % (old_file,new_file))
		shutil.move(old_file,safe_fname(new_file,opts))

def main():
	"""usage: bulkmove [recursive] [optional prefix/postfix[file or pattern]]"""
	global log
	errors = []
	help_dict = dict(version=__version__,
						 author=__author__,
						 created=__created__,
						 copyright=__copyright__)
	hlp = __doc__ % help_dict
	parser = PyTis.MyParser()
	parser.extra_txt = """

NAME:
	bulkmove - Is an advanced move program with options not normally available in
	you operating system's move command.

SYNOPSIS:
	bulkmove [-h][-R] [options...] [-r[Path]] || [*.patern]


DESCRIPTION:
	Allows you to move files from one location to another, while adding a prefix
	or a postfix to the file name.  Consider this, you have a folder of system
	icons with a file called disk.png (a floppy disk).  In another folder called
	audio, you have a file called disk.png (a DVD image).  If you want to move
	all of your files into the same directory, effectively flattening the
	structure, you would end up overwriting one file with another.  You could
	increment the name, however this program allows you to have the files from
	the system folder prefixed with the word system, and audio with the word
	audio. Thus, you have system_disk.png and audio_disk.png copied into your
	destination directory.  Additionally, this program will add an increment
	counter to the end of file names when duplicate file names cannot be avoided,
	to prevent overwriting.

COMMANDS:
-v --verbose
	The verbose flag will show additional information, such as which
	files are being checked.  This is useful when you are not sure if this
	tool has read permissions of images in subdirectories.

	XXX-TODO: Finish the advanced help

ENVIRONMENT:
	Written on Linux, tested on Centos and Debian, but should run on
	DOS/Windows as well.


EXAMPLES:
	$ bukmove -rV pg_*
	$ bukmove -r *.gif
	$ bulkmove -rL . -o/home/jlee/image_base/final/
	$ bukmove -lv -o=/home/myname/newoutdir .

	So I was having difficulty providing args to flatten folder structure for
	MP3s.  It needed to be flattened, because my car stereo had issues with
	folders inside of folders.  However using:

		bulkmove -VD -rp `find . -iname '*.mp3'`

	DID NOT WORK!  And, after some debugging to log files, I found out it wasn't
	this program's fault.  It was the OS splitting filenames and folder names on
	spaces.  (Windows 10 with Cygwin).  
	
	A SOLUTION! Simply providing them as STDIN.  I forgot, but after reviewing
	the code I wrote just over 10 years ago, this program can handle STDIN.  The
	command that worked was:

		bulkmove -VD -rp `find . -iname '*.mp3'`
	
	I hope this helps someone in the future.

	Total example of usage, including command line prompt, program output, etc.:


		(jlee@CHIMP)-[last command: 0 seconds]-(23:21:17 PM Thu Sep 19)->
		(~/test-copy/3 Doors Down has 10 files, 25Mb) --> ls -l
		Dir Size|Perms|Link Count|Owner|Group|Size|Mod. Time|Name
		total 25M
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20  ./
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20  ../
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20 '17 Days'/
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20 'Away From The Sun'/
			 0 drwxrwx---+ 1 jlee None    0 2019-09-19 23:20 'Promo Only MR - 07'/
		8.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20 'The Better Life'/
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20 "When I'm Gone-CDS"/
		9.2M -rwxrwx---+ 1 jlee None 9.2M 2009-07-16 20:06 '01 Kryptonite.mp3'*
		 11M -rwxrwx---+ 1 jlee None  11M 2009-07-16 20:07 '02 Loser.mp3'*
		5.1M -rwxrwx---+ 1 jlee None 5.1M 2008-05-11 11:48 'Be Like That.mp3'*
		1.0K -rwxrwx---+ 1 jlee None  372 2010-08-13 06:38  desktop.ini*
		8.0K -rwxrwx---+ 1 jlee None 6.0K 2008-05-18 04:27  Thumbs.db*

		(jlee@CHIMP)-[last command: 0 seconds]-(23:21:19 PM Thu Sep 19)->
		(~/Music/3 Doors Down has 10 files, 25Mb) -->  find . -iname '*.mp3' | bulkmove -r
		Starting bulkmove at 11:21pm 09 Sep, 2019
		ERROR: Source and Destination are the same: cp ./01 Kryptonite.mp3 /cygdrive/C/Development/Music/3 Doors Down/01 Kryptonite.mp3
		WARNING: 01 Kryptonite.mp3 already existed in the outdir, added _1 to the end of the filename.
		ERROR: Source and Destination are the same: cp ./02 Loser.mp3 /cygdrive/C/Development/Music/3 Doors Down/02 Loser.mp3
		WARNING: 02 Loser.mp3 already existed in the outdir, added _1 to the end of the filename.
		ERROR: Source and Destination are the same: cp ./Be Like That.mp3 /cygdrive/C/Development/Music/3 Doors Down/Be Like That.mp3
		WARNING: Be Like That.mp3 already existed in the outdir, added _1 to the end of the filename.

		(jlee@CHIMP)-[last command: 1 seconds]-(23:28:03 PM Thu Sep 19)->
		(~/test-copy/3 Doors Down has 30 files, 139Mb) --> l
		Dir Size|Perms|Link Count|Owner|Group|Size|Mod. Time|Name
		total 139M
		8.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:21  ./
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:20  ../
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:21 '17 Days'/
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:21 'Away From The Sun'/
			 0 drwxrwx---+ 1 jlee None    0 2019-09-19 23:21 'Promo Only MR - 07'/
		8.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:21 'The Better Life'/
		4.0K drwxrwx---+ 1 jlee None    0 2019-09-19 23:21 "When I'm Gone-CDS"/
		9.2M -rwxrwx---+ 1 jlee None 9.2M 2009-07-16 20:06 '01 Kryptonite.mp3'*
		9.2M -rwxrwx---+ 1 jlee None 9.2M 2009-07-16 20:06 '01 Kryptonite_1.mp3'*
		5.8M -rwxrwx---+ 1 jlee None 5.8M 2009-07-16 20:07 "01 When I'm Gone.mp3"*
		5.4M -rwxrwx---+ 1 jlee None 5.4M 2009-07-16 20:06 '02 Away From The Sun.mp3'*
		 11M -rwxrwx---+ 1 jlee None  11M 2009-07-16 20:07 '02 Loser.mp3'*
		 11M -rwxrwx---+ 1 jlee None  11M 2009-07-16 20:07 '02 Loser_1.mp3'*
		8.9M -rwxrwx---+ 1 jlee None 8.9M 2009-07-16 20:07 '03 Duck and Run.mp3'*
		5.5M -rwxrwx---+ 1 jlee None 5.5M 2009-07-16 20:06 '03 The Road Im On.mp3'*
		 11M -rwxrwx---+ 1 jlee None  11M 2009-07-16 20:07 '05 Be Like That.mp3'*
		6.8M -rwxrwx---+ 1 jlee None 6.8M 2009-02-12 14:21 '11 Here Without You.mp3'*
		5.1M -rwxrwx---+ 1 jlee None 5.1M 2008-05-11 11:48 'Be Like That.mp3'*
		5.1M -rwxrwx---+ 1 jlee None 5.1M 2008-05-11 11:48 'Be Like That_1.mp3'*
		3.6M -rwxrwx---+ 1 jlee None 3.6M 2008-05-11 11:48 'Better Life.mp3'*
		3.8M -rwxrwx---+ 1 jlee None 3.8M 2008-05-11 11:48 'By My Side.mp3'*
		1.0K -rwxrwx---+ 1 jlee None  372 2010-08-13 06:38  desktop.ini*
		5.0M -rwxrwx---+ 1 jlee None 5.0M 2008-05-11 11:48 'Down Poison.mp3'*
		4.4M -rwxrwx---+ 1 jlee None 4.4M 2008-05-11 11:48 'Duck And Run.mp3'*
		4.5M -rwxrwx---+ 1 jlee None 4.5M 2008-05-11 11:48  Kryptonite.mp3*
		5.7M -rwxrwx---+ 1 jlee None 5.7M 2009-07-16 20:06 'Let Me Go.mp3'*
		4.6M -rwxrwx---+ 1 jlee None 4.6M 2008-05-11 11:48 'Life Of My Own.mp3'*
		5.1M -rwxrwx---+ 1 jlee None 5.1M 2008-05-11 11:49  Loser.mp3*
		3.8M -rwxrwx---+ 1 jlee None 3.8M 2008-05-11 11:49 'Not Enough.mp3'*
		2.9M -rwxrwx---+ 1 jlee None 2.9M 2008-05-11 11:49  Smack.mp3*
		4.4M -rwxrwx---+ 1 jlee None 4.4M 2008-05-11 11:49 'So I Need You.mp3'*
		8.0K -rwxrwx---+ 1 jlee None 6.0K 2008-05-18 04:27  Thumbs.db*

		(jlee@CHIMP)-[last command: 0 seconds]-(23:28:23 PM Thu Sep 19)->
		(~/test-copy/3 Doors Down has 30 files, 139Mb) -->

	Perfect, if I do say so myself.  Now, I stil will have to remove the folders.
	Maybe that can become a feature for the next version; a flag or argument that
	will allow the user to tell this program to remove children direcotries, once
	done.  You would need one to tell it to remove them only if empty, one to
	tell it to remove Windows's "Thumbs.db" file and "desktop.ini" files, and one
	to tell it to go ahead and ignore the "duplicate file" filename already
	exists error.  Which would be nice to have anyways, cause now I have to go
	through and remove the files that had "_1" added to the end of the filename,
	as you can see from the WARNING message.

	find 'Moving Melodies'/ -iname '*.mp3' | bulkmove -p
	

	find Techno2 -iname '*.mp3' | bulkmove -p
	mv Techno2_* 'Techno and Trance'/
	rmdir Techno2


NOTE:
	prefixes and postfixes are based on the directories leading to the file,
	from the current path.  If your structure is:
			/images/apps/
			/images/apps/f1.png
			/images/apps/f2.png
			/images/actions/
			/images/actions/f1.png
			/images/actions/f2.png
			/images/icons/
			/images/icons/f1.png
			/images/icons/f2.png

	bulkmove -rP will result in prefixes of images_apps_, images_actions_
	Change directory into the images directory before running this program to
	prevent this.
			/24x24/images/apps/
			/24x24/images/apps/f1.png
			/24x24/images/apps/f2.png
			/24x24/images/actions/
			/24x24/images/actions/f1.png
			/24x24/images/actions/f2.png
			/24x24/images/icons/
			/24x24/images/icons/f1.png
			/24x24/images/icons/f2.png
			/32x32/images/apps/
			/32x32/images/apps/f1.png
			/32x32/images/apps/f2.png
			/32x32/images/actions/
			/32x32/images/actions/f1.png
			/32x32/images/actions/f2.png
			/32x32/images/icons/
			/32x32/images/icons/f1.png
			/32x32/images/icons/f2.png

	This is a desired result as the structure may also be:
		bulkmove -rP will result in prefixes of 24x24_images_apps_,
		24x24_images_actions_

		32x32_images_apps_, 32x32_images_actions_
		Then, running the findrep program the unnecessary _images_ could have been
		replaced.

SEE ALSO:
	bulkcopy, bulkmove, findrep, duplicate-images

COPYRIGHT:
	%(copyright)s

AUTHOR:
	%(author)s

HISTORY:
	Original Author

CHANGE LOG:

	v1.2 MINOR CHANGES																				 September 18, 2019
		Added an example referencing MP3's.
		 
	v1.1 MINOR CHANGES																				 September 18, 2019
		Changed typo in log file name from "duplicate-images" to "bulkmove".

	v1.0 ORIGINAL RELEASE																				September 9, 2009
    Original Publish.

VERSION:
	%(version)s
""" % help_dict
	#if '?' in sys.argv[1:] or '-h' in sys.argv[1:] or '--help' in sys.argv[1:]:
#		hlp = "%s\n%s" % (hlp,parser.extra_text)


	parser.set_description(hlp)
	parser.set_usage(main.__doc__)
	parser.formatter.format_description = lambda s:s

	parser.add_option("-?",None,action="store_true",
						default=False,
						help="Alias for -h --help")

	parser.add_option("-D","--debug",action="store_true",
						default=False,
						help="Enable debugging")

	parser.add_option("-L","--lower",action="store_true",
						default=False,
						help="lower-case all output filenames")

	parser.add_option("-U","--upper",action="store_true",
						default=False,
						help="UPPER-CASE all output filenames")

	parser.add_option("-o","--outdir",action="store",
						default=None,
						help="Output Directory")

	parser.add_option("-v","--version",action="store_true",
						default=False,
						help="Display Version")

	parser.add_option("-V","--verbose",action="store_true",
			default=False,
			help="Be more Verbose.")

	parser.add_option("-p","--prefix",action="store_true",
						default=False,
						help="Prefix images with directories")

	parser.add_option("-P","--postfix",action="store_true",
						default=False,
						help="Postfix images with directories")

	parser.add_option("-r","--recursive",action="store_true",
			default=False,
			help="Recursively scan all subdirectories.")

	(opts,args) = parser.parse_args()
	log = PyTis.set_logging(opts,'bulkmove')

	log.debug('-'*80) 
	log.debug("Starting %s at %s" % (os.path.basename(sys.argv[0]),PyTis.prettyNow())) 

	log.debug("OPTS debug: %s" % opts.debug)
	log.debug("OPTS outdir: %s" % opts.outdir)
	log.debug("OPTS version: %s" % opts.version)
	log.debug("OPTS verbose: %s" % opts.verbose)
	log.debug("OPTS prefix: %s" % opts.prefix)
	log.debug("OPTS postfix: %s" % opts.postfix)
	log.debug("OPTS recursive: %s" % opts.recursive)

	if opts.version:
		return PyTis.version(__version__)

	rootdir = os.path.abspath(os.curdir)
	if not opts.outdir:
		last_arg = sys.argv[-1]
		if os.path.isdir(last_arg):
			opts.outdir = last_arg
			del sys.argv[len(sys.argv)-1]
		else:
			opts.outdir = rootdir
	else:
		i=0
		while i<len(sys.argv):
			if sys.argv[i].startswith('-o') or sys.argv[i].startswith('--outdir'):
				del sys.argv[i]
			i+=1
	if opts.outdir:
		if not os.path.isdir(opts.outdir) or not os.path.exists(opts.outdir):
			try:
				os.mkdir(opts.outdir)
			except (OSError, SystemError):
				log.error("Output dir does not exist, and cannot be created, perhaps you do not have permission to do this. Outdir: %s" % opts.outdir)
				sys.exit(1)

	try:
		if sys.stdin.isatty():
			files = PyTis.filesFromArgs(opts,args)
		else:
			files = [x.strip() for x in sys.stdin]

		if not files:
			return parser.print_help("No files provided")
		else:
			return run(files,rootdir,opts)
	except PyTis.QuitNow as e:
		print("Exiting now, bye!")
	except KeyboardInterrupt as e:
		if opts.verbose:
			print("\nbye!")
		return


if __name__ == '__main__':
	main()

