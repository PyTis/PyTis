#!/bin/bash
<< ////
VERSION 1.

In the next version, I would like to convert the following information into a
dictionary, so I can look up the exit codes, and print out the summary for the
code as well.

Codes:
0 - Proper Exit

1 - Catchall for general errors
2 - Misuse of shell builtins (according to Bash documentation)
		
#define EX_USAGE	64	/* command line usage error */
#define EX_DATAERR	65	/* data format error */
#define EX_NOINPUT	66	/* cannot open input */
#define EX_NOUSER	67	/* addressee unknown */
#define EX_NOHOST	68	/* host name unknown */
#define EX_UNAVAILABLE	69	/* service unavailable */
#define EX_SOFTWARE	70	/* internal software error */
#define EX_OSERR	71	/* system error (e.g., can't fork) */
#define EX_OSFILE	72	/* critical OS file missing */
#define EX_CANTCREAT	73	/* can't create (user) output file */
#define EX_IOERR	74	/* input/output error */
#define EX_TEMPFAIL	75	/* temp failure; user is invited to retry */
#define EX_PROTOCOL	76	/* remote error in protocol */
#define EX_NOPERM	77	/* permission denied */
#define EX_CONFIG	78	/* configuration error */

126 - Command invoked cannot execute
127 - “command not found”
128 - Invalid argument to exit
128+n - Fatal error signal “n”
130 - Script terminated by Control-C
255 - Exit status out of range


////

captureExitCode() {
  typeset cmnd="$*"
  typeset ret_code

  #eval $cmnd;
  eval $cmnd > /dev/null 2>&1;
  ret_code=$?
  if [ $ret_code != 0 ]; then
    printf "Error : [%d] when executing command:\n\n\t '$cmnd'\n" $ret_code
		printf "\n"
		echo "Exit code was the integer($ret_code)"
    exit $ret_code
  fi
	echo "Exit code was the integer: $ret_code"
	exit $ret_code
}

command="$@"
captureExitCode "$command"

exit 0;

