#!/usr/bin/env python
"""pysvnserv
=========
Doc Here"""

import os
import sys
import optparse
import subprocess
import pytis as PyTis

__curdir__ = os.path.abspath(os.path.dirname(__file__))
__author__ = 'Josh Lee'
__created__ = '03:05am 08 Aug, 2013'
__copyright__ = 'PyTis'
__version__ = '1'

	
def run(self):
	global log
	log.error('I actually did run.')
	'''
	cmd = ['svnserve','--foreground', '-d', '--log-file /home/svn/svn.log', '--listen-host dark.vpnet', "--root '/home/svn/repo/dark'"]
	try:
		retcode = os.spawnlp(os.P_WAIT, *cmd)
	except Exception, e:
		log.error(str(e))
	return
	
	try:
		subprocess.call(cmd)
	except Exception, e:
		log.error(str(e))
	return
	'''
	cmds = [
		"svnserve --foreground  -d --log-file /home/svn/svn.log --listen-host dark.vpnet --root '/home/svn/repo/dark/'"
#		"svnserve --foreground  -d --log-file /home/svn/svn.log --listen-host lite.vpnet --root '/home/svn/repo/lite/'"
	]

	for cmd in cmds:
		p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=False)
		tolog = "cmd is: %s" % cmd
		log.debug(cmd)
		while True:
			retcode = p.poll()
			line = p.stdout.readline()
			if line:
				log.debug(line.strip())
			if retcode is not None:
				if p.wait() != 0:
					break


def main():
	"""usage: %prog  ...<options>"""
	global log
	errors=[]
	PyTis.__option_always__ = [True]
	help_dict = dict(version=__version__,
						 author=__author__,
						 created=__created__,
						 copyright=__copyright__)
	parser = PyTis.MyParser()

	parser.extra_txt = """
examples:	


SEE ALSO:
	cryptwatch

COPYRIGHT:
	%(copyright)s

AUTHOR:
	%(author)s

HISTORY:
	Original Author

VERSION:
	%(version)s
""" % help_dict

	parser.formatter.format_description = lambda s:s
	parser.set_description(__doc__)
	parser.set_usage(main.__doc__)

	# ----------------------------
	runtime = optparse.OptionGroup(parser, "-- RUNTIME ARGUMENTS")

	runtime.add_option("-a", "--action", type="choice", action='store',
					 default=None, 
					 dest='action',
					 choices=['start','stop','restart','status'],
					 metavar='[ACTION]', help="choices: <start,stop,restart,status>")

	runtime.add_option("-n", "--nice", type="int", action='store',
					 default=PyTis.MyThread.default_niceness, 
					 dest='niceness',
					 metavar='[INT <-20 - 19>]', help="Nicenesses range from -20 (most favorable scheduling) to 19 (least favorable).  Default 10")

	'''
	runtime.add_option("-t", "--time", type="int", action='store',
					 default=1, 
					 dest='frequency',
					 metavar='[INT]', help="Frequency of how often the loop runs, how long (in seconds) to sleep before re-running registered command (default is 1).")
	'''
		
	parser.add_option_group(runtime)
	# ----------------------------
	dbgroup = optparse.OptionGroup(parser, "-- DEBUG")
	dbgroup.add_option("-D", "--debug", action="store_true",
					 default=False, dest='debug',
					 help="Enable debugging")

	dbgroup.add_option("-V", "--verbose", action="store_true",
					 default=False, dest='verbose',
					 #help=optparse.SUPPRESS_HELP)
					 help="Be more Verbose (make lots of noise)")

	dbgroup.add_option("-v", "--version", action="store_true",
					 default=False, dest='version',
					 help="Display Version")
	parser.add_option_group(dbgroup)
	# ----------------------------

	(opts, args) = parser.parse_args()
	opts.frequency=0
	if opts.action is None and len(args) and args[0] in ('start','stop','restart','status'):
		opts.action = args[0]
		del args[0]

	log = PyTis.set_logging(opts, os.path.basename(sys.argv[0]))

	if opts.version:
		return PyTis.version(__version__)

	if opts.action:
		y = PyTis.MyThread()
		y.setLogFile(log)
		y.setOpts(opts)
		y.register(run,opts)
		y.service(opts)
		return
	else:
		parser.print_help()
		parser.print_usage()


if __name__ == '__main__':
	main()
