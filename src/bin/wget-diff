#!/usr/bin/env python
# ##############################################################################
# The contents of this file are subject to the PyTis Public License Version    #
# 2.0 (the "License"); you may not use this file except in compliance with     #
# the License. You may obtain a copy of the License at:                        #
#                                                                              #
#     http://www.PyTis.com/License/                                            #
#                                                                              #
#     Copyright (c) 2009 - 2016 Josh Lee                                       #
#                                                                              #
# Software distributed under the License is distributed on an "AS IS" basis,   #
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License     #
# for the specific language governing rights and limitations under the         #
# License.                                                                     #
#                                                                              #
# @auto-generated by the PyTis Copyright Tool on 06:52 04 Apr, 2016            #
############################################################################## #
"""wget-diff
=========

NAME:
  wget-diff

SYNOPSIS:
	wget-diff [--options] [-H] [-V] [-D]

DESCRIPTION:

CODE:

"""

import cStringIO
from difflib import unified_diff
import os, optparse
import shutil, sys
import subprocess
import smtplib
from email.mime.text import MIMEText
import urllib
from urllib2 import urlopen
from threading import Timer
import socket
import urllib2
import socket

class MyException(Exception):
    pass

# This program needs to import PyTis v3, which imports stuff from the
# sub-package pylib3, this program also needs to import from the sub-package
# awslib, pylib3.awslib itself, has to import from the parent, pytis3, which it
# can only do if the parent directory is a package, turning the parent (bin)
# into a package breaks importing pytis3 for this program in the first place
# and caused severe circular import errors.  To fix this, we have to adjust the
# path.
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__),'..')))
# 
# Internal
#
try:
	#import pytis as PyTis # Shared GPL/PPL License
	from bin import PyTis # Shared GPL/PPL License
	from pylib import configobj as COBJ
except ImportError as e:
	# We cannot go any further than this, we can't use the Parser or Logging tool
	# to display these errors because those very tools are loaded from PyTis.
	# Therefore, display errors now and exit with an errored exit code.
	print("This program requires the PyTis python library to run.")
	print("You may download the PyTis library, or do an SVN checkout from:")
	print("<https://sourceforge.net/projects/pytis/>")
	print("This program should be installed in the bin directory of the PyTis library.")
	print(str(e))
	sys.exit(1)



errors=[]

__author__ = 'Josh Lee'
__created__ = '11:48am 12 May, 2008'
__copyright__ = 'PyTis.com'
__curdir__ = os.path.abspath(os.path.dirname(__file__))
__version__ = '2.0'

__configdir__=os.path.abspath(os.path.join(PyTis.__configdir__,'.%s'%os.path.basename(sys.argv[0])))

def test_config_exists(cpath):
	return cpath.strip() and os.path.isdir(cpath) and os.path.exists(cpath)

def setup_config(cpath):
	global log
	try:
		os.mkdir(cpath)
	except OSError, e:
		if 'File exists' in str(e):
			log.info("%s directory already exists, exiting." % cpath)
			return 0
		elif 'Permission denied' in str(e):
			log.error('ERROR: You do not have permission to create ' \
				'this directory: %s' % cpath)
			return 1
		else:
			log.error(str(e))
			return 1
	else:
		log.info("%s directory created succesfully." % cpath)
		return 0

def check_ini(opts,config):
	"""wget-diff run doc help"""
	global __configdir__, log

	files = config.get('cache')
	dates = config.get('cache_dates')
	if not files: 
		files=config['cache']={}
		config.save()
	if not dates: 
		files=config['cache_dates']={}
		config.save()

	for i, url in enumerate(config.sections):
		i+=1

		if url not in files.values() and url not in ('cache','cache_dates'):
			f_int_rep=i
			while str(f_int_rep) in [str(key) for key in files.keys()]: f_int_rep+=1
			config['cache'][str(f_int_rep)]=url
			config['cache_date'][str(f_int_rep)]=()
			config.save()

		elif url in files.values():
			f_int_rep = {v: k for k, v in files.items()}[url]

		if url in ('cache','cache_dates'):
			continue

		section = config[url]
		actions = section.get('action',None)
		
		if not actions:
			log.error("Section %s has no action configured!" % url)
		else:
			if type(actions) is type([]):
				actions = [action.strip().lower() for action in actions]
			else:
				actions = [action.strip().lower() for action in actions.split(',')]

			for action in actions:
				if action not in ('email','runcommand','runsql'):
					log.error("Invalid action specified '%s' for url: %s"%(action,url))
					return 1
			
				# #####################################################################
				# BEGIN SQL -----------------------------------------------------------

				if action == 'runsql':
					sql = section.get('sql')
					if not sql:
						log.error("No sql statement provided for %s and 'runsql' " \
							"was specified as the action." % url)
						return 1

					driver = section.get('driver')
					if not driver:
						log.error("No driver provided for %s and 'rundriver' " \
							"was specified as the action (postgresql or mysql)." % url)
						return 1

					host = section.get('host')
					if not host:
						log.error("No host provided for %s and 'runhost' " \
							"was specified as the action." % url)
						return 1

					port = section.get('port')
					if not port:
						log.error("No port provided for %s and 'runport' " \
							"was specified as the action." % url)
						return 1

					user = section.get('user')
					if not user:
						log.error("No user provided for %s and 'runuser' " \
							"was specified as the action." % url)
						return 1

					password = section.get('password')
					if not password:
						log.error("No password provided for %s and 'runpassword' " \
							"was specified as the action." % url)
						return 1

					database = section.get('database')
					if not database:
						log.error("No database provided for %s and 'rundatabase' " \
							"was specified as the action." % url)
						return 1

				# END SQL -------------------------------------------------------------
				# #####################################################################
				# BEGIN RUN COMMAND ---------------------------------------------------

				if action == 'runcommand':
					command = section.get('command')
					if not command:
						log.error("No sh/bash command provided for %s and 'runcommand' " \
							"was specified as the action." % url)
						return 1

				# END RUN COMMAND -----------------------------------------------------
				# #####################################################################
				# BEGIN EMAIL ---------------------------------------------------------

				if action == 'email':

					body = section.get('body')
					if body is None:
						log.error("Body missing for %s and 'Email' was " \
							"specified as the action." % url)
						return 1

					subject = section.get('subject')
					if subject is None:
						log.error("Subject missing for %s and 'Email' was " \
							"specified as the action." % url)
						return 1

					from_address = section.get('from')
					if not from_address:
						log.error("From address missing for %s and 'Email' was " \
							"specified as the action." % url)
						return 1

					to_address = section.get('to')
					if not to_address:
						log.error("To address(s) missing for %s and 'Email' was " \
							"specified as the action." % url)
						return 1

					cc_address = section.get('cc')
					if not cc_address:
						log.debug("CC address(s) missing for %s and 'Email' was " \
							"specified as the action." % url)
						section['cc']=''
						# continue # it's okay, we don't need a CC

				# END EMAIL -----------------------------------------------------------
	config.save()
	return 0

	

def run(opts,config):
	"""wget-diff run doc help"""
	global __configdir__, log

	files = config.get('cache')
	dates = config.get('cache_dates')
	if not files: files=config['cache']={}
	if not dates: files=config['cache_dates']={}

	for i, url in enumerate(config.sections):
		i+=1
		trigger = False
		first_saved=''
		last_changed=''
		pretty_now=PyTis.prettyNow()
		try:
			true_diff.close()
		except:
			pass

		true_diff = cStringIO.StringIO()

		if url not in files.values() and url not in ('cache','cache_dates'):
			
			f_int_rep=i
			while str(f_int_rep) in [str(key) for key in files.keys()]: f_int_rep+=1
			config['cache'][str(f_int_rep)]=url
			config.save()
		elif url in files.values():
			f_int_rep = {v: k for k, v in files.items()}[url]

		if url in ('cache','cache_dates'):
			continue

		fname='.cache-%s'%f_int_rep
		fpath=os.path.abspath(os.path.join(__configdir__,fname))
		
		log.debug('processing section: %s, #%s' % (url,i))
		section = config[url]
		actions = section.get('action',None)
		
		if not actions:
			log.error("Section %s has no action configured!" % url)
		else:
			if type(actions) is type([]):
				actions = [action.strip().lower() for action in actions]
			else:
				actions = [action.strip().lower() for action in actions.split(',')]

			for action in actions:
				if action not in ('email','runcommand','runsql'):
					log.error("Invalid action specified '%s' for url: %s"%(action,url))
					continue
			
			if os.path.isfile(fpath) and os.path.exists(fpath):
				try:
					old_handle = open(fpath,'r')
					old_data = old_handle.read(-1)
					if not old_data:  old_data = None
				except (IOError, OSError) as e:
					log.error("Could not read old cache file for: %s" % url)
					log.error("Assuming corrupt data and assuming DIFF exists!")
					old_data="Could not read old cache file for: %s Assuming corrupt " \
						"data and assuming DIFF exists!" % url
				finally:
					old_handle.close()
			else:
				#first time to create and cache data
				old_data = None


			try: 
				handle = open(fpath,'wb+')
				new_data = urllib.urlopen(url).read()
				
				# n N o N
				# n - o N
				# n N o -
				# n - o -
				if new_data is None and old_data is None:
					log.error("Cannot wget site: %s" % url)
					trigger = False
					continue # continue on to the next URL
				elif new_data is not None and old_data is None:
					trigger = False
					# Site was not ever cached before, this is the first time, just save it
					handle.write(new_data)
					config['cache_dates'][str(f_int_rep)] = (pretty_now,pretty_now)
					config.save()

				elif new_data is None and old_data is not None:
					# site cannot be cached at this time, was in the past, just move on
					log.error("Cannot wget site: %s" % url)
					trigger = False
				else:
					if new_data == old_data:
						# Nothing has changed.
						log.debug("no change in: %s" % url)
						trigger = False
					else:
						# the file has changed!
						# grab the dates before changing them
						first_saved,last_changed = config['cache_dates'][str(f_int_rep)]
						# now update the last updated date
						config['cache_dates'][str(f_int_rep)]=(config['cache_dates'][str(f_int_rep)][0],pretty_now)
						config.save()

						trigger = True 
						# XXX-TODO capture diff first, then write new data.
						for line in unified_diff(old_data.split("\n"), new_data.split("\n"), lineterm=""):
							true_diff.write(line)
							true_diff.write("\n")
						
						handle.write(new_data)

						log.debug("%s, first cached on: %s, last updated on: %s has since " \
							"changed." % (url, first_saved,last_changed))
						log.debug("Re-caching %s as of today: %s."%(url,pretty_now))
						log.info("DIFF %s: " % url)
						log.info("%s" % true_diff.getvalue())


			except (IOError, OSError) as e:
				log.error("Could not write to cache file: %s for site: %s  !!!" % \
					(fpath, url))
			finally:
				handle.close()

			if trigger:
				for action in actions:
				# #####################################################################
				# BEGIN SQL -----------------------------------------------------------

					if action == 'runsql':
						sql = section.get('sql')
						driver = section.get('driver')
						host = section.get('host')
						port = section.get('port')
						user = section.get('user')
						password = section.get('password')
						database = section.get('database')

				# END SQL -------------------------------------------------------------
				# #####################################################################
				# BEGIN RUN COMMAND ---------------------------------------------------

					if action == 'runcommand':
						command = section.get('command')

						cmd_list = []
						#cmd_list.extend(self.buildIoNice())
						#cmd_list.extend(self.buildNice())
						command_list = [a.strip() for a in command.split()]
						cmd_list.extend(command_list)
						#self.log.debug(repr(cmd_list))
						#log.debug(repr(cmd_list))
						try:
							subprocess.call(cmd_list)
						except Exception as e:
							log.error("An unknown error occured when trying to run " \
								"command \"%s\" for url: %s changed on %s" % \
								(repr(cmd_list),url,pretty_now))

				# END RUN COMMAND -----------------------------------------------------
				# #####################################################################
				# BEGIN EMAIL ---------------------------------------------------------

					if action == 'email':

						body = section.get('body')
						if not true_diff.getvalue(): true_diff.write("no diff available\n")
						body = "%s\n\nURL: %s has changed on %s.\n\nDIFF of %s -\n\n%s" % \
							(body, url, pretty_now, url, true_diff.getvalue())

						temptexfile = cStringIO.StringIO()

						temptexfile.write(body)
						msg=MIMEText(temptexfile.read())
						temptexfile.close()

						msg['Subject']= section.get('subject')
						msg['From']   = section.get('from')
						msg['To']     = section.get('to')
						if section.get('cc'):
							msg['CC']   = section.get('cc')

						s = smtplib.SMTP('localhost')
						s.sendemail(msg['From'],msg['To'],msg.as_string())
						

				# END EMAIL -----------------------------------------------------------



def main():
	"""usage: wget-diff"""
	global __configdir__, errors, log

	config_filename = os.path.abspath(os.path.join(PyTis.__configdir__, 
		'%s.ini' % os.path.basename(os.path.abspath(sys.argv[0]))))


	PyTis.__option_always__ = [True]
	help_dict = dict(version=__version__,
						 author=__author__,
						 created=__created__,
						 copyright=__copyright__)
	parser = PyTis.MyParser()

	parser.extra_txt = "\n\n%s\n" % run.__doc__ + """

EXAMPLES:	

SEE ALSO:

COPYRIGHT:
	%(copyright)s

AUTHOR:
	%(author)s

CHANGE LOG:

CREATED:
	%(created)s

HISTORY:
	Original Author

VERSION:
	%(version)s
""" % help_dict

	parser.formatter.format_description = lambda s:s
	if '--help' in sys.argv:
		parser.set_description(__doc__)
		helpishere=True # to determine help mode (short or full)
	else:
		helpishere=False # to determine help mode (short or full)
		parser.set_description('')

	runtime = optparse.OptionGroup(parser, "-- RUNTIME ARGUMENTS")
	parser.add_option_group(runtime)
	# -------------------------------------------------------------------------
	# variable setting
	vars = optparse.OptionGroup(parser, "-- CONFIGURATION SETTINGS")

	vars.add_option("-S", "--setup", action="store_true", default=False, 
										help="Runs setup to install this script.")

	parser.add_option_group(vars)
	# ----------------------------
	dbgroup = optparse.OptionGroup(parser, "-- DEBUG")
	dbgroup.add_option("-D", "--debug", action="store_true",
					 default=False, dest='debug',
					 help="Enable debugging")


	# This is a little trick to tell if the user entered the -V/--verbose flag.
	# We want verbosity on by default, but we also want to know if the user
	# entered it for debug items, and providing end messages vs informed output.
	dbgroup.add_option("", "--totaly-verbose", action="store_true",
		default=False, dest='totally_verbose', 
		help=optparse.SUPPRESS_HELP)

	dbgroup.add_option("-V", "--verbose", action="store_true",
					 default=False, dest='verbose',
					 help="Be more Verbose (make lots of noise)")

	dbgroup.add_option("-q", "--quiet", action="store_true",
					 default=False, dest='quiet',
					 help="be vewwy quiet (I'm hunting wabbits)")

	dbgroup.add_option("-v", "--version", action="store_true",
					 default=False, dest='version',
					 help="Display Version")

	parser.add_option_group(dbgroup)
	# ----------------------------

	(opts, args) = parser.parse_args()
	if opts.verbose: 
		opts.totally_verbose = True
	if opts.quiet: opts.verbose = False
	if not opts.quiet:
		opts.verbose = True

	#if opts.action is None and len(args) and args[0] in ('start','stop','restart','status'):
	#	opts.action = args[0]
	#	del args[0]

	if opts.debug:
		main.__doc__ = "%s\n\n	CONFIG FILE: %s" % (main.__doc__, \
			os.path.abspath(config_filename))
	else:
		pass

	parser.set_usage(main.__doc__)

	old_version = opts.version
	opts.version = True
	log = PyTis.set_logging(opts, os.path.basename(sys.argv[0]))
	opts.version = old_version

	if opts.version:
		return PyTis.version(__version__)

	if not test_config_exists(__configdir__) or opts.setup:
		try:
			setup_config(__configdir__)
		except KeyboardInterrupt,e:
			log.debug("Keyboard-Interrupt, bye!")
			if not opts.quiet:
				log.info("\nbye!")
		finally:
			return 0

	config = COBJ.load(config_filename)

	# if (opts.quiet or opts.verbose or len(args) != 0) and not errors:
	if not opts.quiet and not opts.verbose and len(args)==0 and not errors:
		return parser.print_usage()
	elif not errors:
		try:
			if check_ini(opts, config):
				log.error("program halted due to improper ini configuration.")
				parser.print_usage()
				return 1
			run(opts, config)
		except KeyboardInterrupt,e:
			log.debug("Keyboard-Interrupt, bye!")
			if not opts.quiet:
				log.info("\nbye!")
			return 0
		else:
			if opts.totally_verbose: log.info("Done.")
			return 0
	else:
		parser.print_usage()
		if errors:
			log.error(str("\n".join(errors)))
		return parser.print_help(errors)

	parser.print_help("ERROR: Unknown, but invalid input.")
	sys.exit(0)

if __name__ == '__main__':
		main()

