#!/usr/bin/python2.4
"""
This file was auto generated by 'gimPy, MapToPython' on 20061206

USAGE
    if __name__ == '__main__':
        # Example Useage
        client = dict()
        x = gimPy, MapToPython(ds=client)
        x.draw()

"""

import os, binascii, tempfile
from cStringIO import StringIO

# Note, you must have report lab installed
from reportlab.pdfgen import canvas


class test_report(object):
    height_adjust = 0
    page_width = 8.5
    page_height = 11
    dpi = 150
    fontname = None
    fontsize = None
    areas = [
        {'item' : 'client_name', 'x' : 30, 'y' : 64, 'fontsize' : 10, 'fontname' : 'Helvetica'},
        {'item' : 'medicaide_no', 'x' : 30, 'y' : 100, 'fontsize' : 20, 'fontname' : 'Times-BoldItalic'},
        {'item' : 'service', 'x' : 255, 'y' : 82, 'fontsize' : None, 'fontname' : None},
        {'item' : 'area', 'x' : 285, 'y' : 82, 'fontsize' : None, 'fontname' : None}
            ]

    def __init__(self, file_name='test_report.pdf', ds={}, my_canvas=None):
        if my_canvas is None:
            self.my_canvas = canvas.Canvas(file_name, #(destination_file)
                pagesize=(72 * self.page_width,72 * self.page_height))
        else:
            self.my_canvas = my_canvas
        self.ds = ds

        # Store old font stuff
        old_fontname = self.my_canvas._fontname
        old_fontsize = self.my_canvas._fontsize

        # Grab new font name
        if self.fontname is None:
            new_fontname = old_fontname
        else:
            new_fontname = self.fontname

        # Grab new font size
        if self.fontsize is None:
            new_fontsize = old_fontsize
        else:
            new_fontsize = self.fontsize

        # Set font stuff
        self.my_canvas.setFont('%s' % new_fontname, new_fontsize)

    def preRender(self):
        for area in self.areas:
            x = (72 * int(area['x'])) / int(self.dpi)
            y = (72 * self.page_height) - ((72 * int(area['y'])) / int(self.dpi))
            item = self.ds[area['item']]
            fontname = area['fontname']
            fontsize = area['fontsize']

            if callable(self.ds[area['item']]):
                self.ds[area['item']](self.my_canvas, area)
            else:
                if not item:
                    item = ''
                if fontname is not None or fontsize is not None:
                    old_fontname = self.my_canvas._fontname
                    old_fontsize = self.my_canvas._fontsize

                    if fontname is None:
                        new_fontname = old_fontname
                    else:
                        new_fontname = area['fontname']

                    if fontsize is None:
                        new_fontsize = old_fontsize
                    else:
                        new_fontsize = area['fontsize']

                    self.my_canvas.setFont('%s' % new_fontname, new_fontsize)
                    self.my_canvas.drawString(x,y,'%s' % item)
                    self.my_canvas.setFont('%s' % old_fontname, old_fontsize)
                    if item is None:
                        item = ''
                else:
                    self.my_canvas.drawString(x,y,'%s' % item)


    def draw(self):
        
        new_width = 72 * self.page_width
        new_height = 72 * self.page_height
        self.my_canvas.drawInlineImage(self.getBackGround(),
                                 0, 0 + self.height_adjust,
                                 width=new_width,
                                 height=new_height)

        self.preRender()
        os.unlink(os.path.abspath(os.path.join(self.tmp_dir,self.tmp_img)))
        os.rmdir(os.path.abspath(self.tmp_dir))
        self.my_canvas.showPage()
        return self.my_canvas

    def render(self):
        self.draw()
        self.my_canvas.save()

    def getBackGround(self):
       out = ("iVBORwo=\n")
       img_src = binascii.a2b_base64(out)
       self.tmp_dir = tempfile.mkdtemp()
       self.tmp_img = '20061206_test_report.png'
       handle = os.path.join(self.tmp_dir, self.tmp_img)
       f = open(handle, 'w')
       f.write(img_src)
       f.close()
       return handle


if __name__ == '__main__':
    # Test Data

    class default_dict(dict):
        def __init__(self, other={}, default=None):
            dict.__init__(self, other)
            self.default = default

        def __getitem__(self, key):
            try:
                return dict.__getitem__(self, key)
            except KeyError:
                return self.default
    x = test_report(ds=default_dict(default='Test'))
    x.render()
