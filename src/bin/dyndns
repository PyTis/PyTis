#!/usr/bin/env python
"""dyndns
======
Dynamic DNS updater for DynDns.com
Written by Josh Lee
No warrenties what so ever.
this file is to be licensed GPL

When using flags to setup your config, this doesn't
actually run the program, only set up the config.
"""

"""
This program needs updated to another version. Below, you will find an error,
from assuming that the "info" section in the config file exists.  All that is
needed, is to simply check for it's existence, then to create it first if it
doesn't exist.  However, upon discovering that this needs updated, (in the
conf_set function) also, the conf file location should be auto-generated, not
manually set as a variable,  Now that I have had a few moments to review, I
noticed that t his is very outdated, and needs just a full blown version
update.  This is a TODO, since this program isn't used or needed currently.
<<BACK BURNERED>>

	DYNDNS
	======

	(root@neptune ( IP:192.168.1.17 )  )-(~/bin)-(01:55 PM Wed Sep 12)->
	(115 files, 1.4Mb)--> dyndns
	INFO     config file not found, creating: /home/jlee/.dyndns
	Traceback (most recent call last):
		File "/root/bin/dyndns", line 165, in <module>
			main()
		File "/root/bin/dyndns", line 162, in main
			if run: do(conf)
		File "/root/bin/dyndns", line 106, in do
			conf_set(conf, 'ip address', nip)
		File "/root/bin/dyndns", line 46, in conf_set
			conf.set('info', option, value)
		File "/usr/lib/python2.7/ConfigParser.py", line 396, in set
			raise NoSectionError(section)
	ConfigParser.NoSectionError: No section: 'info'

"""
from ConfigParser import *
import re
import urllib
import optparse
import os
import sys
import logging; log=logging.getLogger('dyndns')

__author__ = 'Josh Lee'
__copyright__ = 'PyTis'
__created__ = '2008-05-12 11:48:36.549714'
__version__ = '1.8'
cfile = '/home/jlee/.dyndns'


def load_config(cfile=cfile):
    ''' Load our config file for us, create it if it doesn't exist.
        Also creates the first and only section used by ConfigParser.
    '''
    conf = ConfigParser()
    try:
       conf.readfp(open(cfile))
       if not conf.has_section('info'):
            conf.add_section('info')
            conf.write(open(cfile,'w'))

            return load_config(cfile)# conf.close()
    except IOError:
        log.info('config file not found, creating: %s', cfile)
        os.system('touch %s' % cfile)
        h = open(cfile, 'w')
        h.write("[info]\n")
        h.close()
        conf.readfp(open(cfile))
    return conf

def conf_set(conf, option, value, cfile=cfile):
    ''' Nice little wrapper that just writes a config option to our config file
    '''
    conf.set('info', option, value)
    conf.write(open(cfile,'wb'))
    log.info('updateing %s', option)

def current_ip(conf):
    ''' though you can specify different url, this defaults to dyndns's website.
        this will just return your ip as a string
    '''
    try:
        url = conf.get('info', 'hosturl')
    except:
        url = 'http://checkip.dyndns.com'
    data = urllib.urlopen(url).read()
    ipr = re.compile('[0-9.+]')
    return ''.join(ipr.findall(data))

def check(conf):
    ''' make sure everything we need to post a change to dyndns.com is located
        in the config file, and has a value, we woudln't want to send a bunch of
        bogus request to them.  :-)
    '''
    for x in ['username', 'password', 'hosturl', 'hostname']:
        try:
            z = conf.get('info', x)
            if not z:
                log.warn('You are missing a value in your config file for: %s' % x)
                return False
        except:
            log.warn('config file missing: %s', x)
            return False
    return True

def run(conf):
    ''' This guy actually tells dyndns.com your ip has changed.
    '''
    class AppURLopener(urllib.FancyURLopener):
        version = "App/1.7"
    urllib._urlopener = AppURLopener()
    # I am too lazy to figure out how to do the url2 with base64 authentication, and
    # sence they have https, we should be ok
    url_string = "https://%s:%s@members.dyndns.org/nic/update/?hostname=%s&myip=%s&wildcard=NOCHG&mx=NOCHG&backmx=NOCHG" % \
        (conf.get('info', 'username'),
         conf.get('info', 'password'),
         conf.get('info', 'hostname'),
         conf.get('info', 'ip address')
    )
    return urllib.urlopen(url_string)

def do(conf):
    ''' The heart of our program, grabs the current (nip) and old ip (from confg)
        This little guy is fairly self explanitory, as they all are.
    '''
    nip = current_ip(conf)
    try:
        oip = conf.get('info', 'ip address')
    except:
        oip = None
    log.debug('OLD IP: %s', oip)
    log.debug('NEW IP: %s', nip)
    if oip != nip:
        conf_set(conf, 'ip address', nip)
        if check(conf):
            return run(conf)
    else:
        log.info('Your ip has not changed: %s' % oip)

def main():
    """USAGE: dyndns """
    global __version__, __author__, __created__, __copyright__
    help_dict = dict(version=__version__,
             author=__author__,
             created=__created__,
             copyright=__copyright__)
    parser = optparse.OptionParser(description=__doc__)
    parser.set_usage(main.__doc__)
    parser.formatter.format_description = lambda s:s

    parser.add_option("-D", "--debug", action="store_true",
                      default=False,
                      help="Enable debugging")

    parser.add_option('-p', '--password', action='store',
                      help='dyndns.com password')

    parser.add_option('-u', '--username', action='store',
                      help='dyndns.com username')

    parser.add_option('-n', '--hostname', action='store',
                      help="Your Hostname (example: me.dyndns.org)")

    # Yeah yeah, I know, why z?  Well h is taken by help, and u by uzername,...
    parser.add_option('-z', '--hosturl', action='store',
                      help='dyndns.com host')

    parser.extra_txt = """
CODE:
	Flag vs. Argument:
		Flag - an option that accepts no input.
		Argument - an option that requires input.

SEE ALSO:


COPYRIGHT:

	%(copyright)s

AUTHOR:

	%(author)s

HISTORY:

	Original Author

CHANGE LOG:

	v1.8 MINOR CHANGE																						 October 15, 2018
		Fixed missing ini file errors in load_config
		 
	v1.0 ORIGINAL RELEASE																				 5 December, 2008
    Original Publish.

EXAMPLES:	



BUGS - KNOWN ISSUES:


CREATED:

	%(created)s

VERSION:

	%(version)s

"""  % help_dict

    (opts, cmd) = parser.parse_args()

    # Logging Configuration
    log.setLevel(0)
    formatter = '%(levelname)-8s %(message)s'

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG, format=formatter)
    else:
        logging.basicConfig(level=logging.INFO, format=formatter)
    log.debug('starting...')

    run = True
    conf = load_config()
    if opts.username:
        run=False
        conf_set(conf, 'username', opts.username)
    if opts.password:
        run=False
        conf_set(conf, 'password', opts.password)
    if opts.hosturl:
        run=False
        conf_set(conf, 'hosturl', opts.hosturl)
    if opts.hostname:
        run=False
        conf_set(conf, 'hostname', opts.hostname)
    # don't run if they were setting up some config var
    if run: do(conf)

if __name__ == '__main__':
    main()
