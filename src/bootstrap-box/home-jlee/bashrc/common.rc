# ~/.bashrc: executed by bash(1) for non-login shells.

export PATH="/sbin/:$PATH"
export PAGER="/usr/bin/less"
export EDITOR="vim"



[ -z "$PS1" ] && return

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vi='vim'
alias v='vi'

if [[ "$OSTYPE" == "cygwin" ]]; then
	alias ping='ping -n 4'
else
	alias ping='ping -c 4'
fi

alias dc='cd ..'


alias x='screen -x -U'
alias list='screen -list'
alias d='screen -d'
alias RR='screen -RR'
alias screen='screen -U'
alias wipe='screen -wipe'

alias fn='find . -iname '
alias f='fg'
alias j='jobs'
alias p='pwd'
alias c='/usr/bin/clear'


# enable color support of ls and also add handy aliases
# -----------------------------------------------------------------------------
# Project shortcuts ##
############################################################################
##  XXX-TODO (next version)
## In the next version, I would like to keep up to 20 lines in the file.
## Without giving a number, prj would just load the top line. setprj would
## shift all lines down one, and add a new top line, prj again would load the
## top line, but prj 1 or prj 2 would go back one or 2 lines down and read
## those instead (basically allowing you to keep history).  I think the
## trickiest part would be to keep it from growing too much, and keeping it to
## 20 lines only.
##
############################################################################

   function _setProject() {
     old="$PROJECT";
     if [ "$*" == '' ]; then
       input=`pwd`;
       input=`realpath $input`;
     else
       input=`realpath $*`;
     fi 

     if [[ "$input" == "$PROJECT" ]]; then
       echo "NO CHANGE, PROJECT ALREADY SET TO: $PROJECT";
     elif [[ "$input" != "" ]]; then
       export PROJECT=$input;
       echo "PROJECT WAS: $old";
       echo "PROJECT IS NOW: '$PROJECT' ";
     else
       noinput=`pwd`;
       if [[ "$noinput" == "$PROJECT" ]]; then
         echo "NO CHANGE, PROJECT ALREADY SET TO: $PROJECT";
       else
         export PROJECT="$noinput";
         echo "PROJECT WAS: $old";
         echo "PROJECT IS NOW: '$PROJECT' ";
       fi
     fi

     echo $PROJECT > ~/.project.set

     _setPrompt;
   }
   function _loadProject() {
     if [ -f  ~/.project.set ]; then
       export PROJECT=`cat ~/.project.set`
     else
       export PROJECT="~/"
     fi
     _setPrompt;
   }
   function _showProject() {
     echo "$PROJECT";
   }
   function _prj() {
     _loadProject;
     if [ $PROJECT == "~/" ]; then
       cd
     else
       cd $PROJECT;
     fi

     _setPrompt;

   }
   function _getProject() {
     _loadProject;
     echo "PROJECT IS: ";
     _showProject;
   }

   alias setproject='_setProject';
   alias setProject='_setProject';

   alias setprj='_setProject';
   alias setPrj='_setProject';

   alias showProject='_showProject';
   alias showproject='_showProject';
   alias showprj='_showProject';
   alias showPrj='_showProject';
   alias getprj='_showProject';
   alias getPrj='_showProject';

   alias sp='_setProject';

   alias loadProject='_loadProject';
   alias loadproject='_loadProject';
   alias loadprj='_loadProject';
   alias loadPrj='_loadProject';

   alias getProject='_getProject';
   alias getproject='_getProject';
   alias getprj='_getProject';
   alias getPrj='_getProject';
#   alias prj='cd "$PROJECT"'
   alias prj='_prj';
#
# -----------------------------------------------------------------------------

if [ -x /usr/bin/dircolors ]; then
    test -r /usr/bin/dircolors && eval "$(/usr/bin/dircolors -b)" || eval "$(/usr/bin/dircolors -b)"
    alias ls='ls --color=always'
    alias dir='ls --color=always --format=vertical'
    alias vdir='ls --color=always --format=long'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
#else
#    eval `dircolors -b`
fi

# important, this allows colors from ls to pull through whne piping to more or less
alias more='less -R'
alias less='less -R'

alias grep="grep --exclude='*.swp'"
alias gr="grep -r --exclude='debug.log*' "
# some more ls aliases
alias ll='ls -halF --time-style=long-iso --color=always'
alias la='ls -A'
alias l='ls -shaFl --time-style=long-iso --color'
alias l='echo "Dir Size|Perms|Link Count|Owner|Group|Size|Mod. Time|Name"; ls -shaFl --time-style=long-iso --color --group-directories-first --format=long'


# BOOM goes the dynomite!!! I am SO glad I fixed this!!!!! :-D 
function _bestLS() {
  echo 'MODE|Dir Size|Perms|Link Count|Owner|Group|Size|Mod.  Time|Name';

 if [ "$*" == '' ]; then
   alias _awk4ls="awk '{k=0;s=0;for(i=0;i<=8;i++){;k+=((substr(\$2,i+2,1)~/[rwxst]/)*2^(8-i));};j=4;for(i=4;i<=10;i+=3){;s+=((substr(\$1,i,1)~/[stST]/)*j);j/=2;};if(k){;printf(\"%0o%0o \",s,k);};print;}'";
   output=`ls -shaFl --time-style=long-iso --color=always -F --group-directories-first --format=long | _awk4ls`;
 else
   output=`ls -shaFl --time-style=long-iso --color=always -F --group-directories-first --format=long $* | _awk4ls`;
 fi
 echo "$output"
}
alias l="_bestLS"


export svnroot=svn+ssh://file077@svn.code.sf.net/p/pytis/code/trunk
export SVN_SSH="ssh -l file077"
export SVNROOT=svnroot

alias svu='svn update'
alias u='svu'
alias i='svn commit'

alias notes='vi ~/notes.txt'

