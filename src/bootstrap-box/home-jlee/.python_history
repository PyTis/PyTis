handle = open('/etc/pytis/.mycopyright/default.txt')
x = handle.read(-1)
x.close()
x
import pytis.pytis as P
"%s" % x
handle.close()
handle = open('/etc/pytis/.mycopyright/default.txt', 'r')
x = handle.read(-1)
handle.close()
x
print(x)
handle = open('/etc/pytis/.mycopyright/default.txt', 'rb')
x = handle.read(-1)
handle.close()
print(x)
print(P.dos2unix(x))
import pytis.pytis as P
print(P.dos2unix(x))
import csv
x = csv.csv_writer
x = csv.csvwriter
dir(csv)
csv_writer = csv.writer
dir(csv_writer)
csv_writer = csv.writer('test')
csv_writer = csv.writer(open('test','w'))
dir(csv_writer)
from csisutil import sessionfactory as s
S = s.api()
S = s.api('a')
S = s.api('ab')
dir(S)
dir(S.ec2_client)
dir(S.ec2_client.exceptions)
from collections import OrderedDict as odict
t = odict()
t['a'] = 'AA'
t['b'] = 'BA'
t['c'] = 'CA'
t['z'] = 'Z'
t['Y'] = 'y'
t['Q'] = 'q'
t['q'] = 'Q'
for key, value in t:
	print("k: %s => v: %s" % (key, value))
for key, value in t.items():
	print("k: %s => v: %s" % (key, value))
tt = odict({'a':'AA','b':'Ba','c':'Cc','z':'Z','Y':'y','Q':'q', "q":'Q'})
[print("k: %s, v: %s" % (k, v)) for k,v, in tt.items()]
for key, value in tt.items():
	print("k: %s => v: %s" % (key, value))
[print("k: %s, v: %s" % (k, v)) for k,v, in tt.items()]
tt.items()
type(tt.items())
for group in tt:
	print(type(group))
for group in tt:
	print(group)
tt.keys()
tt.values()
help(zip)
unzip
uzip
import boto3
help(boto3.Session)
x = open('foobar', 'r')
def foo():
	pass
dir(foo)
foo.__annotations__
def foo(a, b=None, c=True):, 
def foo(a, b=None, c=True):
	"""
	docstring for foo
	"""
	# first comment
	print("")
	# second comment
	return ''
	#last comment
dir(foo)
foo.__annotations__
foo.__call__
foo.__call__()
foo.__class__
foo.__class__()
foo.__class__(code='')
foo.__class__(code=print('hello'))
foo.__class__(print('hello'))
foo.__class__(print('hello'),'print(''))
foo.__class__(print('hello'),'print('');)
foo.__class__(print('hello'),'print()';)
foo.__class__(print('hello'),'print()')
dir(foo)
foo.__closure__
foo.__code__
foo.__code__()
dir(foo.__code__)
foo.__init__
foo.__repr__
foo.co_name
dir__code__.co_name
foo.__code__.co_name
foo.__code__.co_freevars
foo.__code__.co_flags
foo.__code__.co_firstlineno
foo.__code__.co_flnotab
foo.__code__.co_linenumtab
foo.__code__.co_lnotab
foo.__code__.co_names
co_namesggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg            gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg                                                                                                                           gggggg                                 ggggggggggggggggggggggggggggggggggggggg                                                                                                                               wrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrgrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg g gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
a = ['a','b','c','d']
b=[1,2,3,4]
zip(a,b)
print(zip(a,b))
help(zip)
c =zip(a,b)
list(c)
dict(c)
dict(zip(a,b))
b=[1,2,3,4,5]
dict(zip(a,b))
def foo():
	pass
foo.bar = 1
foo()
foo.bar
print(dir(foo))
print(dict(foo))
print(foo.__dict__)
class A:
	deff aa(self):
class A:
	def aa(self):
		pass
x = A()
x.b=1
class B(object):
	pass
B.b =1
y = B()
y.b
y.c=1
x = object()
x.doit()
try:
	x.doIt()
except AttributeError as e:
	print(dir(e))
	if "stdin" in repr(e):
		print("stdin")
try:
	x.doIt()
except AttributeError as e:
	print("about to raise another")
	raise
else:
	print('all good')
d = {'a' : "alpha', 'b' : 'bravo'}
d = {'a' : 'alpha', 'b' : 'bravo'}
d
if 'a' in d.keys():
	print(d['a'])
if 'a' in d:
	print(d['a'])
import pytz
import csv
csv.__file__
import _csv
_csv.__file__
import datetime
datetime.datetime.now()
len(str(datetime.datetime.now()))
len(str('datetime.datetime(2020, 6, 28, 23, 22, 13, 550280)'))
x = datetime.datetime.now()
dir(x)
x.ctime
x.ctime()
x.date()
x.isoformat()
str(x.isoformat())
len(str(x.isoformat()))
x.microsecond
x.now
x.now()
str(x.now())
len(str(x.now()))
x.timestamp
x.timestamp()
len(str(x.timestamp()))
x.__str__()
len(x.__str__())
a_record = list([})
a_record = list([])
a_record
type(a_record)
a_record[0]
a_record[0:]
a_record[:0]
a_record[:0:]
raise PermissionError('test')
import sys
'%f.%f' % (sys.version_info.major,sys.version_info.minor)
type('%f.%f' % (sys.version_info.major,sys.version_info.minor))
float('%f.%f'%(sys.version_info.major,sys.version_info.minor))
x = '%f.%f' % (sys.version_info.major,sys.version_info.minor)
x
float('%s.%s'%(sys.version_info.major,sys.version_info.minor))
sys.version_info.major
sys.version_info.minor
'%f' % sys.version_info.minor
'%f' % sys.version_info.major
class W (object):
	pass
w = W()
class W (object):
w = W()
class W (object):
	pass
w = W()
dir(w)
w.__name__
w.__class__
dir(w.__class__)
dir(w.__class__.__str__)
w.__class__.__str__
w.__class__.__repr__
w.__class__.__repr__()
w.__class__.__repr__(w)
w.__class__.__str__(w)
import ittertools
type(itertools.coint(0)).__name__
x = itertools.count(0)
import itertools
x = itertools.count(0)
type(x).__name__
type(w).__name__
class Z(W):
	pass
z = Z()
type(w).__name__
type(z).__name__
z.__class__.__name__
w.__class__.__name__
class A:
	pass
a = A()
a.__class__.__name__
w.__class__.__name__
z.__class__.__name__
 a.self.__class__.__name__
a.self.__class__.__name__
z.self
class A(object):
	def __init__(self):
		print(self.__class__.__name__)
a = A()
class B(A):
	def __init__(self):
		print(self.__class__.__name__)
b=B()
aa=A()
round(float(0.2), 1)
round(float(0.2), 0)
round(float(0.2), -1)
round(float(0.23423432), -1)
round(float(0.23423432), 1)
round(float(0.23423432), None)
round(float(0.23423432), 1)
round(float(0.23423432), 2)
round(float(0.23423432), 3)
round(float(0.23423432), None)
d={}
dir(d)
d={'a':'A'}
dd=copy(d)
import copy
copy.copy(d)
dd = copy.copy(d)
dd.upadte({})
dd
dd.update({})
dd
dd['b':'B']
dd['b'] = 'B'
dd
d
import sys
sys.argv
x = [1, 2, 3]
y = [1]
x[0:]
x[1:]
y[1:]
z=[]
z[1:]
x
x[:-1]
x[:1]
x[:0]
x[:-1]
x[-1:]
import math
math.pow
help(math.pow)
math.pow(3, 3)
math.pow(3, math.pow(3, 3))
math.pow(4,4)
4*4
4*4*4
4*4*4*4
5*5*5
5*5*5*5
9*9*9*9*9*9*9*9*9*9*9
9*9
81-9
81*9
729*9
import math.pow as p
from math import pow as p
p(3,3)
p(3, p(3, 3) )
3*3
*3
9*3
3*3
9*3
27*-3
27*9
243*3
3*3*3
p(3, 27)
654654654*321654*321654
p( 654654654*321654*321654, 5)
a = '' or 'stuff'
a
import atexit as a
help(a)
dir(a)
def A():
	pass
a.register(A)
a.register)
a.register
a.register(A)
def A():
	pass
a.register(A)
a._ncallbacks
a._ncallbacks()
a._run_exitfuncs
a._run_exitfuncs()
